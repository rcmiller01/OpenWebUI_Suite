version: '3.8'

services:
  # OpenWebUI Suite - Main application with plugins
  webui:
    image: ghcr.io/<ORG>/openwebui-suite:2025.09.03
    container_name: openwebui-suite
    restart: unless-stopped
    
    ports:
      - "3000:3000"
    
    environment:
      # Ollama configuration
      OLLAMA_HOST: ${OLLAMA_HOST:-http://core2-gpu:11434}
      
      # Plugin configuration
      OWUI_MEMORY_PATH: /data/memory.sqlite
      OWUI_PLUGIN_TIMEOUT: ${OWUI_PLUGIN_TIMEOUT:-30}
      OWUI_WIDGET_CACHE_TTL: ${OWUI_WIDGET_CACHE_TTL:-3600}
      
      # Application configuration
      WEBUI_NAME: ${WEBUI_NAME:-OpenWebUI Suite}
      WEBUI_URL: ${WEBUI_URL:-http://localhost:3000}
      
      # Security configuration
      WEBUI_AUTH: ${WEBUI_AUTH:-true}
      WEBUI_SECRET_KEY: ${WEBUI_SECRET_KEY:-your-secret-key-here}
      
      # Database configuration (if using external DB)
      DATABASE_URL: ${DATABASE_URL:-}
      
      # Logging configuration
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
    volumes:
      # Persistent data storage
      - ./data:/data
      
      # Configuration files
      - ./config:/config:ro
      
      # Optional: Custom plugins (for development)
      - ./plugins:/opt/custom-plugins:ro
      
      # Optional: Custom widgets (for development)  
      - ./widgets:/app/web/extensions/custom-widgets:ro
    
    networks:
      - openwebui-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    read_only: false  # Needs write access for SQLite

  # Optional: Ollama service (if not running externally)
  ollama:
    image: ollama/ollama:latest
    container_name: ollama-server
    restart: unless-stopped
    
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    
    volumes:
      # Ollama models storage
      - ollama_data:/root/.ollama
      
      # Optional: Custom models directory
      - ./ollama/models:/models:ro
    
    networks:
      - openwebui-network
    
    environment:
      # Ollama configuration
      OLLAMA_HOST: "0.0.0.0"
      OLLAMA_ORIGINS: "*"
      OLLAMA_KEEP_ALIVE: ${OLLAMA_KEEP_ALIVE:-5m}
      OLLAMA_NUM_PARALLEL: ${OLLAMA_NUM_PARALLEL:-1}
      
    # GPU support (uncomment if using NVIDIA GPU)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    
    profiles:
      - ollama  # Only start with --profile ollama

  # Optional: Redis for caching (for production deployments)
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    restart: unless-stopped
    
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispass}
    
    volumes:
      - redis_data:/data
    
    networks:
      - openwebui-network
    
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redispass}
    
    profiles:
      - redis  # Only start with --profile redis

  # Optional: PostgreSQL for production (instead of SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-openwebui}
      POSTGRES_USER: ${POSTGRES_USER:-openwebui}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dbpass}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    
    networks:
      - openwebui-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-openwebui} -d ${POSTGRES_DB:-openwebui}"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    profiles:
      - postgres  # Only start with --profile postgres

networks:
  openwebui-network:
    driver: bridge
    name: openwebui-suite-network

volumes:
  # Persistent storage volumes
  ollama_data:
    name: openwebui-suite-ollama-data
  
  redis_data:
    name: openwebui-suite-redis-data
  
  postgres_data:
    name: openwebui-suite-postgres-data
