# Manual Memory Service Deployment Commands
# Copy and paste these commands one by one on your Docker host

# 1. Create working directory
mkdir -p /tmp/memory-deploy
cd /tmp/memory-deploy

# 2. Download the service package  
curl -L -o memory-service.zip "https://raw.githubusercontent.com/rcmiller01/OpenWebUI_Suite/main/memory-service.zip"

# 3. Extract files
unzip -o memory-service.zip

# 4. List extracted files to verify
ls -la

# 5. Create the standalone Dockerfile (this will overwrite the problematic one)
cat > Dockerfile << 'EOF'
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt ./requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Copy application files
COPY src/ ./src/
COPY start.py ./start.py

EXPOSE 8102

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8102/healthz || exit 1

CMD ["uvicorn", "src.app:app", "--host", "0.0.0.0", "--port", "8102"]
EOF

# 6. Verify the Dockerfile was created correctly
echo "Dockerfile first few lines:"
head -5 Dockerfile

# 7. Build the Docker image
docker build -t owui/memory-2.0:latest .

# 8. Stop any existing container
docker stop memory-service 2>/dev/null || true
docker rm memory-service 2>/dev/null || true

# 9. Run the new container
docker run -d \
  --name memory-service \
  --restart unless-stopped \
  -p 8102:8102 \
  owui/memory-2.0:latest

# 10. Wait for startup
sleep 15

# 11. Test health endpoint
curl http://localhost:8102/healthz

# 12. Check container status
docker ps | grep memory-service

# Expected output: {"ok": true, "service": "memory-2.0"}
